{
	"name": "Runs",
	"properties": {
		"activities": [
			{
				"name": "Runs",
				"type": "Copy",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [
					{
						"name": "Source",
						"value": "."
					},
					{
						"name": "Destination",
						"value": "ww_run"
					}
				],
				"typeProperties": {
					"source": {
						"type": "SqlServerSource",
						"sqlReaderQuery": " select  cast(   CASE  when ProductionLineId=1 then '8503b67d-02a7-eb11-9442-000d3acb71d2'\nwhen ProductionLineId=2 then '8603b67d-02a7-eb11-9442-000d3acb71d2'\nwhen ProductionLineId=3 then '8703b67d-02a7-eb11-9442-000d3acb71d2'\nwhen ProductionLineId=4 then '8803b67d-02a7-eb11-9442-000d3acb71d2'\nwhen ProductionLineId=5 then '8903b67d-02a7-eb11-9442-000d3acb71d2'\nwhen ProductionLineId=6 then '8a03b67d-02a7-eb11-9442-000d3acb71d2'\nwhen ProductionLineId=7 then '8b03b67d-02a7-eb11-9442-000d3acb71d2'\nwhen ProductionLineId=8 then '8c03b67d-02a7-eb11-9442-000d3acb71d2'\nwhen ProductionLineId=9 then '8d03b67d-02a7-eb11-9442-000d3acb71d2'\nwhen ProductionLineId=10 then '8e03b67d-02a7-eb11-9442-000d3acb71d2'\nwhen ProductionLineId=11 then '8f03b67d-02a7-eb11-9442-000d3acb71d2'\nwhen ProductionLineId=12 then '9003b67d-02a7-eb11-9442-000d3acb71d2'\nwhen ProductionLineId=13 then '9103b67d-02a7-eb11-9442-000d3acb71d2'\nwhen ProductionLineId=14 then '9203b67d-02a7-eb11-9442-000d3acb71d2'\nwhen ProductionLineId=15 then '9303b67d-02a7-eb11-9442-000d3acb71d2'\nwhen ProductionLineId=16 then '9403b67d-02a7-eb11-9442-000d3acb71d2'\nend as UNIQUEIDENTIFIER)  ProductionLineGUID ,cast(0 as int) as [Status],*\n, CONVERT(datetime, \n               SWITCHOFFSET(CONVERT(datetimeoffset, \n                                    DateAdd(hh,-12,LastUpdatedOn) AT TIME ZONE 'New Zealand Standard Time'), \n                            DATENAME(TzOffset, SYSDATETIMEOFFSET()))) [lastUpdatedOnNZST] from (\n\tSELECT \n        bwo.Id as ProductionWorkOrderId,\n\t\t'Bottling' workOrderType,\n        pl.id as ProductionLineId,\n\t\tcast(0 as bit) PendingUpdate,\n        cast(CONVERT(BINARY(16), REVERSE(CONVERT(BINARY(16),BWO.Id, 1000))) as uniqueidentifier) [Run Id],\n        cast(book.ExpectedStartDateTime as Date) as RunDate,\n        book.ProductionRunNumber,\n        cast(CASE when ProductionLineId=1 then '95532c19-019c-eb11-b1ac-000d3a6ae149'\n\t\t\t\t\twhen ProductionLineId=2 then '98532c19-019c-eb11-b1ac-000d3a6ae149'\n\t\t\t\t\twhen ProductionLineId=3 then '99532c19-019c-eb11-b1ac-000d3a6ae149'\n\t\t\t\t\twhen ProductionLineId=4 then '9a532c19-019c-eb11-b1ac-000d3a6ae149'\n\t\t\t\t\twhen ProductionLineId=5 then '9c532c19-019c-eb11-b1ac-000d3a6ae149'\n\t\t\t\t\twhen ProductionLineId=6 then '9d532c19-019c-eb11-b1ac-000d3a6ae149'\n\t\t\t\t\twhen ProductionLineId=7 then '9e532c19-019c-eb11-b1ac-000d3a6ae149'\n\t\t\t\t\twhen ProductionLineId=8 then '9f532c19-019c-eb11-b1ac-000d3a6ae149'\n\t\t\t\t\twhen ProductionLineId=9 then 'a0532c19-019c-eb11-b1ac-000d3a6ae149'\n\t\t\t\t\twhen ProductionLineId=10 then 'a1532c19-019c-eb11-b1ac-000d3a6ae149'\n\t\t\t\t\twhen ProductionLineId=11 then 'a2532c19-019c-eb11-b1ac-000d3a6ae149'\n\t\t\t\t\twhen ProductionLineId=12 then 'a3532c19-019c-eb11-b1ac-000d3a6ae149'\n\t\t\t\t\twhen ProductionLineId=13 then 'a5532c19-019c-eb11-b1ac-000d3a6ae149'\n\t\t\t\t\twhen ProductionLineId=14 then 'a6532c19-019c-eb11-b1ac-000d3a6ae149'\n\t\t\t\t\twhen ProductionLineId=15 then 'a7532c19-019c-eb11-b1ac-000d3a6ae149'\n\t\t\t\t\twhen ProductionLineId=16 then 'a8532c19-019c-eb11-b1ac-000d3a6ae149'\n\n       END as uniqueidentifier\n                ) ProductionLine,\n        [site].Name as [Site],\n        co.Name as Client,\n\t\tco.[WWCode] + ' - ' + co.[Name] AS [Customer ID],\n        co.WWCode as ClientWWCode,\n        bwo.ClientWorkOrderReference,\n        v.Name as Variety,\n        vi.Name + ' ' + v.Name VintageVariety,\n        bwo.WineVolume,\n        cast(bwo.Active as int) StateCode,\n        bwo.AdditionalInstructions,\n        bgct.Name as BottleGasCoverType,\n        bwo.CarbonationSaturation,\n        bwo.ClientBatchCode,\n        bwo.CO2ReceivalSpecification,\n        bwo.CreatedBy,\n        bwo.CreatedOn,\n        bwo.ExonetIntegrationError,\n        bwo.ExonetSalesOrderNumber,\n        bwo.LastCellarFilterDate,\n        NULL as Organic,\n        bwo.PushedToExonet,\n        bwo.PushedToExonetDate,\n        bwo.PushedToScale,\n        bwo.PushedToScaleDate,\n        bwo.RequestorName,\n        bwo.ScaleIntegrationError,\n        bwo.SO2ReceivalSpecification,\n        bwo.StartupWinemaker,\n        bwo.UpdatedBy,\n        bwo.UpdatedOn,\n        vi.Name as Vintage,\n        bft.Name as BottlingFiltrationType,\n        cft.Name as CellarFiltrationType,\n        ec.Name as ExportCertification,\n\t\tNULL AS [QuantityCases],\n        NULL [UseAllStock],\n        NULL [CaseVariability],\n        NULL  AS [FullProductName],\n        NULL  AS [PackType],\n        NULL  AS [RunLine],\n        NULL  AS [FinishedGoodsStockCode],\n        NULL  AS [StockToConsumeLotRunNo],\n        NULL  AS  [StockToConsumeStockCode],\n        NULL  AS  [StockToConsumeStockCodeDescription],\n        NULL AS [StockToConsumeCaseVariability],\n        NULL as [End Market],\n        (SELECT Max(v) FROM (VALUES (bwo.UpdatedOn)) AS value(v)) as [LastUpdatedOn]\n        FROM\n        companies.BottlingWorkOrder bwo\n        left join companies.Company co on bwo.CompanyId = co.Id\n        left join lookups.Site [site] on bwo.SiteId = [site].Id\n        left join companies.ProductionBooking book on bwo.Id = book.BottlingWorkOrderId\n        left join lookups.ProductionLine pl on book.ProductionLineId = pl.Id\n        left join lookups.Variety v on bwo.VarietyId = v.Id\n        left join lookups.Vintage vi on bwo.VintageId = vi.Id\n        left join lookups.WorkOrderStatus stat on bwo.WorkOrderStatusId = stat.Id\n        left join lookups.BottleGasCoverType bgct on bwo.BottleGasCoverTypeId = bgct.Id\n        left join companies.BottlingFiltrationType bft on bwo.BottlingFiltrationTypeId = bft.Id\n        left join companies.CellarFiltrationType cft on bwo.CellarFiltrationTypeId = cft.Id\n        left join lookups.ExportCertification ec on bwo.ExportCertificationId = ec.Id\n        WHERE  cast(book.ExpectedStartDateTime as Date) > getdate() - 3\n    \n    UNION ALL\n\n    SELECT  \n        rwo.[Id] as ProductionWorkOrderId,\n        'ReWork' workOrderType,\n        book.ProductionLineId,\n\t\tcast(0 as bit) PendingUpdate,\n        cast(CONVERT(BINARY(16), REVERSE(CONVERT(BINARY(16),rwo.Id, 1000))) as uniqueidentifier) [Run Id],\n  \t\tcast(book.ExpectedStartDateTime as Date) as [RunDate],\n\n        rwo.ProductionRunNumber [ProductionRunNumber],\n        cast(\n        CASE when PL.ID=1 then '5d3b5dfb-885e-eb11-a812-000d3a6ab826'\n            when PL.ID=2 then '1b944108-895e-eb11-a812-000d3a6ab826'\n            when PL.ID=3 then 'cf3a5b0e-895e-eb11-a812-000d3a6ab826'\n            when PL.ID=4 then 'e4cc751b-895e-eb11-a812-000d3a6ab826'\n            when PL.ID=5 then '950fcb21-895e-eb11-a812-000d3a6ab826'\n            when PL.ID=6 then '93dfcc27-895e-eb11-a812-000d3a6ab826'\n            when PL.ID=15 then 'd244d180-895e-eb11-a812-000d3a6ab826'\n            when PL.ID=16 then '9768de8c-895e-eb11-a812-000d3a6ab826'\n            when PL.ID=7 then '0248af39-895e-eb11-a812-000d3a6ab826'\n            when PL.ID=8 then 'c661c241-895e-eb11-a812-000d3a6ab826'\n            when PL.ID=9 then '670fcf47-895e-eb11-a812-000d3a6ab826'\n            when PL.ID=10 then 'f26ef74d-895e-eb11-a812-000d3a6ab826'\n            when PL.ID=11 then '6dd92d5c-895e-eb11-a812-000d3a6ab826'\n            when PL.ID=12 then 'a5f0d862-895e-eb11-a812-000d3a6ab826'\n            when PL.ID=13 then 'b7f25169-895e-eb11-a812-000d3a6ab826'\n            when PL.ID=14 then '1c49f877-895e-eb11-a812-000d3a6ab826'\n        END as uniqueidentifier) ProductionLine,\n        [site].Name as [Site],\n        c.[Name] AS [Client],\n        c.[WWCode] + ' - ' + c.[Name] AS [Customer ID],\n        c.[WWCode] ClientWWCode,\n        rwo.[ClientWorkOrderReference],\n        V.Name as [Variety],\n        vi.Name + ' ' + v.Name VintageVariety,\n        rwo.CasesToCreate*335.0 WineVolume, --How to calculate from cases to create\n        cast(rwo.Active as int) StateCode,\n        rwo.AdditionalInstructions,\n        NULL as BottleGasCoverType,\n        NULL as CarbonationSaturation,\n        NULL as ClientBatchCode,\n        NULL as CO2ReceivalSpecification,\n        NULL as CreatedBy,\n        NULL as CreatedOn,\n        NULL as ExonetIntegrationError,\n        NULL as ExonetSalesOrderNumber,\n        NULL as LastCellarFilterDate,\n        NULL as Organic,\n        NULL as PushedToExonet,\n        NULL as PushedToExonetDate,\n        NULL as PushedToScale,\n        NULL as PushedToScaleDate,\n        NULL as RequestorName,\n        NULL as ScaleIntegrationError,\n        NULL as SO2ReceivalSpecification,\n        NULL as StartupWinemaker,\n        rwo.UpdatedBy,\n        rwo.UpdatedOn,\n        NULL as Vintage,\n        NULL as BottlingFiltrationType,\n        NULL as CellarFiltrationType,\n        NULL as ExportCertification,\n        rwo.[CasesToCreate] AS [QuantityCases],\n        rwo.[UseAllStock],\n        CASE WHEN rwo.[UseAllStock] = 0 THEN 'Exact' ELSE 'Use All Stock' END AS [CaseVariability],\n        bom.[StockCodeDescription] AS [FullProductName],\n        bom.[BottlesPerCarton] AS [PackType],\n        pl.[Name] AS [RunLine],\n        bom.[StockCode] AS [FinishedGoodsStockCode],\n        rwo.[StockToConsumeLot] AS [StockToConsumeLotRunNo],\n        cast(conbom.StockCode as nvarchar) [StockToConsumeStockCode],\n        cast(conbom.StockCodeDescription as nvarchar) [StockToConsumeStockCodeDescription],\n        cast(cv.Name as nvarchar) as StockToConsumeCaseVariability,\n        M.WWCode [End Market],\n        (SELECT Max(v) FROM (VALUES (rwo.UpdatedOn), (bom.UpdatedOn)) AS value(v)) as [LastUpdatedOn]\n        FROM [companies].[LabellingOrReworkOrder] rwo\n        INNER JOIN companies.BillOfMaterial conbom on rwo.StockToConsumeBomId =conbom.Id\n        INNER JOIN companies.[Company] AS c ON c.[Id] = rwo.[CompanyId]\n        INNER JOIN companies.[BillOfMaterial] bom ON rwo.[StockToCreateId] = bom.[Id]\n        INNER JOIN companies.ProductionBooking book on rwo.Id = book.LabellingOrReworkOrderId\n        LEFT JOIN companies.ProductionBooking wobook on rwo.ProductionRunNumber =wobook.ProductionRunNumber and wobook.TypeId = 1\n        LEFT JOIN companies.BottlingWorkOrderLine bwol on bwol.BillOfMaterialId = conbom.Id and bwol.BottlingWorkOrderId = wobook.BottlingWorkOrderId\n        LEFT JOIN [lookups].[CaseVariability] cv on bwol.CaseVariabilityId = cv.Id\n        left join lookups.Site [site] on rwo.SiteId = [site].Id\n        left join lookups.ProductionLine pl on book.ProductionLineId = pl.Id\n        left join lookups.Variety v on book.VarietyId = v.Id\n        left join lookups.Vintage vi on book.VintageId = vi.Id\n        left join lookups.WorkOrderStatus stat on rwo.WorkOrderStatusId = stat.Id\n        join lookups.Market M on M.Id= bom.MarketId \n        where cast(book.ExpectedStartDateTime as Date) > getdate() - 3)a",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"sink": {
						"type": "CommonDataServiceForAppsSink",
						"writeBatchSize": 10,
						"writeBehavior": "upsert",
						"ignoreNullValues": false
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"mappings": [
							{
								"source": {
									"name": "StateCode",
									"type": "Int32",
									"physicalType": "int"
								},
								"sink": {
									"name": "statecode",
									"type": "Int32"
								}
							},
							{
								"source": {
									"name": "Client",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "ww_clientname",
									"type": "String"
								}
							},
							{
								"source": {
									"name": "ClientWorkOrderReference",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "ww_clientworkorderreference",
									"type": "String"
								}
							},
							{
								"source": {
									"name": "PendingUpdate",
									"type": "Boolean",
									"physicalType": "bit"
								},
								"sink": {
									"name": "ww_pendingupdate",
									"type": "Boolean"
								}
							},
							{
								"source": {
									"name": "RunDate",
									"type": "DateTime",
									"physicalType": "date"
								},
								"sink": {
									"name": "ww_rundate",
									"type": "DateTime"
								}
							},
							{
								"source": {
									"name": "Run Id",
									"type": "Guid",
									"physicalType": "uniqueidentifier"
								},
								"sink": {
									"name": "ww_runid",
									"type": "Guid"
								}
							},
							{
								"source": {
									"name": "ProductionRunNumber",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "ww_runnumber",
									"type": "String"
								}
							},
							{
								"source": {
									"name": "ProductionLineGUID",
									"type": "Guid",
									"physicalType": "uniqueidentifier"
								},
								"sink": {
									"name": "ww_runproductionline",
									"type": "Guid"
								}
							},
							{
								"source": {
									"name": "StockToConsumeCaseVariability",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "ww_stocktoconsumecasevariability",
									"type": "String"
								}
							},
							{
								"source": {
									"name": "StockToConsumeLotRunNo",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "ww_stocktoconsumerun",
									"type": "String"
								}
							},
							{
								"source": {
									"name": "StockToConsumeStockCode",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "ww_stocktoconsumestockcode",
									"type": "String"
								}
							},
							{
								"source": {
									"name": "StockToConsumeStockCodeDescription",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "ww_stocktoconsumestockcodedescription",
									"type": "String"
								}
							},
							{
								"source": {
									"name": "Variety",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "ww_variety",
									"type": "String"
								}
							},
							{
								"source": {
									"name": "Vintage",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "ww_vintage",
									"type": "String"
								}
							},
							{
								"source": {
									"name": "VintageVariety",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "ww_vintagevariety",
									"type": "String"
								}
							},
							{
								"source": {
									"name": "ProductionWorkOrderId",
									"type": "Int32",
									"physicalType": "int"
								},
								"sink": {
									"name": "ww_workorderid",
									"type": "Int32"
								}
							},
							{
								"source": {
									"name": "workOrderType",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "ww_workordertype",
									"type": "String"
								}
							},
							{
								"source": {
									"name": "lastUpdatedOnNZST",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "ww_workorderupdatedon",
									"type": "DateTime"
								}
							}
						],
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "WWSQL003_Portal",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "Runs",
						"type": "DatasetReference"
					}
				]
			},
			{
				"name": "Send fail email",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "Runs",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"url": "https://prod-31.australiasoutheast.logic.azure.com:443/workflows/a488ee4e6dd34fbf85d69ff5695dceb8/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mzFskLc897eR_sPvdtE-f6H8lVCS1H-7qdc-aUnGK8I",
					"method": "POST",
					"headers": {
						"Content-Type": "application/json"
					},
					"body": {
						"DataFactoryName": "@{pipeline().DataFactory}",
						"PipelineName": "@{pipeline().Pipeline}",
						"Subject": "An error has occurred!",
						"ErrorMessage": "The ADF pipeline has crashed! Please check the logs.",
						"EmailTo": "Tejaswi.Datla@wineworks.co.nz"
					}
				}
			}
		],
		"annotations": [],
		"lastPublishTime": "2021-08-30T19:35:11Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}